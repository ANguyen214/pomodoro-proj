{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguye\\\\Documents\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Progression from \"./Progression\";\nimport DurationManager from \"./DurationManager\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session \n * state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next \n   * session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [aria, setAria] = useState(0);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    setSession(() => nextTick);\n    calcAria(session);\n  }, isTimerRunning ? 1000 : null);\n\n  function sessionTitle(sessionType) {\n    if (sessionType === \"Focusing\") {\n      if (focusDuration < 9) {\n        return `${session.label} for 0${focusDuration}:00 minutes`;\n      } else {\n        return `${session.label} for ${focusDuration}:00 minutes`;\n      }\n    }\n\n    if (sessionType === \"On Break\") {\n      if (breakDuration < 9) {\n        return `${session.label} for 0${breakDuration}:00 minutes`;\n      } else {\n        return `${session.label} for ${breakDuration}:00 minutes`;\n      }\n    }\n  }\n\n  function calcAria(instance) {\n    if (instance.label === \"Focusing\") {\n      setAria(() => (focusDuration * 60 - session.timeRemaining) / (focusDuration * 60) * 100);\n    } else {\n      setAria(() => (breakDuration * 60 - session.timeRemaining) / (breakDuration * 60) * 100);\n    }\n  }\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DurationManager, {\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    isTimerRunning: isTimerRunning,\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Progression, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    isTimerRunning: isTimerRunning,\n    playPause: playPause,\n    classNames: classNames,\n    setSession: setSession,\n    setIsTimerRunning: setIsTimerRunning,\n    sessionTitle: sessionTitle,\n    aria: aria,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/nguye/Documents/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","Progression","DurationManager","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","aria","setAria","Audio","play","calcAria","sessionTitle","sessionType","instance","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Progression from \"./Progression\";\nimport DurationManager from \"./DurationManager\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session \n * state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next \n   * session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\n\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const [aria, setAria] = useState(0);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      setSession(() => nextTick);\n      calcAria(session);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  \n\n  function sessionTitle (sessionType) {\n    if(sessionType === \"Focusing\") {\n      if(focusDuration < 9){\n        return (`${session.label} for 0${focusDuration}:00 minutes`);\n      } else {\n        return (`${session.label} for ${focusDuration}:00 minutes`);\n      }\n    } \n      \n    if(sessionType === \"On Break\") {\n      if(breakDuration < 9) {\n        return (`${session.label} for 0${breakDuration}:00 minutes`);\n      }\n      else {\n        return (`${session.label} for ${breakDuration}:00 minutes`); \n      }\n    } \n  }\n\n  function calcAria(instance) {\n    if(instance.label === \"Focusing\") {\n      setAria(() => (focusDuration * 60 - session.timeRemaining) / (focusDuration * 60) * 100);\n    } else {\n      setAria(() => (breakDuration * 60 - session.timeRemaining) / (breakDuration * 60) * 100);\n    }   \n  }\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <DurationManager \n        focusDuration={focusDuration}\n        setFocusDuration={setFocusDuration}\n        isTimerRunning={isTimerRunning}\n        breakDuration={breakDuration}\n        setBreakDuration={setBreakDuration}\n      />\n      <Progression \n        session={session} \n        focusDuration={focusDuration} \n        breakDuration={breakDuration}\n        isTimerRunning={isTimerRunning}\n        playPause={playPause}\n        classNames={classNames}\n        setSession={setSession}\n        setIsTimerRunning={setIsTimerRunning}\n        sessionTitle={sessionTitle}\n        aria={aria}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}